name: Demo 05 - Pull Request

on:
  push:
    branches: 
      - main
  workflow_dispatch:

jobs:
  build-test-branch:
    name: "Build and Test Of PR"
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Setup .NET Core 5.x
    - name: Setup .NET Core 5.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Install dependencies
    - name: Install dependencies
      run: dotnet restore "${{ github.workspace }}/mywebapp/mywebapp.sln"

    # Build the project
    - name: Build project
      run: dotnet build "${{ github.workspace }}/mywebapp/mywebapp.sln" --configuration Release --no-restore

    # Run tests and generate results
    - name: Run unit tests
      run: |
        dotnet test "${{ github.workspace }}/mywebapp/mywebapp.sln" --no-restore --verbosity normal --logger "trx;LogFileName=test-results.trx"

    # Generate test report
    - name: Publish test results
      uses: dorny/test-reporter@v1.5.0
      if: always()    # Run this step even if the previous steps fail
      with:
        name: XUnit Tests
        path: ${{ github.workspace }}/mywebapp/tests/TestResults/*.trx
        reporter: dotnet-trx

    # Publish the project
    - name: Publish project
      run: dotnet publish "${{ github.workspace }}/mywebapp/src/mywebapp.csproj" -c Release -o mywebapp

    # Upload build artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mywebapp-build-artifacts
        path: mywebapp/**
        if-no-files-found: error
        retention-days: 90

    # Install Trivy for security scanning
    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install wget -y
        wget https://github.com/aquasecurity/trivy/releases/download/v0.40.0/trivy_0.40.0_Linux-64bit.deb
        sudo dpkg -i trivy_0.40.0_Linux-64bit.deb
      continue-on-error: false  # Fail the workflow if Trivy installation fails

    # Run security scan with Trivy and generate SARIF results
    - name: Security scan with Trivy
      run: |
        trivy fs --exit-code 1 --security-checks vuln,config --format sarif --output trivy-results.sarif mywebapp

    # Upload SARIF file for security results
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: trivy-results.sarif
      continue-on-error: false  # Fail the workflow if SARIF upload fails
